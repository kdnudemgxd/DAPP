function [Y,Xf,Af] = PBS_70_38_NeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 14-Mar-2022 13:30:42.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [10;3];
x1_step1.gain = [0.00202020202020202;0.025974025974026];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.4144744415858849784;-3.4869026046718523126;1.0547395923244593519;0.38085803872660189962;-0.85503816530431520082;1.3860825623490566905;-2.7098413705548773933;-2.4612599961519565639;-3.1958723837243185883];
IW1_1 = [1.2388949950884762252 4.8378088587478629279;3.5657188628861997692 2.1496085142412724167;-3.4427617274796697977 -3.1590502011174246277;2.7008071287569928032 -4.1189304353157902838;-2.3119506199425892135 -4.9297724329423244782;3.5828908303011752778 1.8825426124252335747;-4.7402663285165642648 -1.0612193292678149259;-0.9974152527247979183 -3.466871180490100457;-1.87674821972383854 -3.5034092735456181522];

% Layer 2
b2 = -0.57657263891255161603;
LW2_1 = [-0.25704328080332722317 0.96783007624369199462 1.5425362072449377848 0.82548033995960179432 0.079705309937832494183 0.9439245841920814728 -0.44317106099665559693 -3.687105113842284343 2.8649414657786773653];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0108150198996366;
y1_step1.xoffset = 0.053;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
